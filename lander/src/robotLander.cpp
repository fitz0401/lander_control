#include <array>
#include <stdlib.h>
#include <string>
#include <bitset>
#include <fstream>
#include "CubicSplineNoDynamic.h"
#include "robotLander.h"
#include "GetPosIK.h"
#include "math.h"
#include "WalkLegExeLegIk.hpp"
#include "param.h"

using namespace aris::dynamic;
using namespace aris::plan;

namespace robotLander
{
    //指令的执行顺序
    //1、先执行prepareNrt，每条指令只执行一次
    //2、然后执行executeRT,executeRT每一个循环周期(默认1ms)会被实时核调用一次，执行的总时间由用户给定
    //3、执行结束后，本指令会被析构
    //指令功能：某一电机或者所有电机1-cos(theta)轨迹运行，幅值为pos，周期为time，周期数为timenum

    //Open&Close : to be updated
    struct MoveSParam
	{
		double pos;
		double time;
        double timenum;
        std::vector<bool> active_motor;			//目标电机
		std::vector<double> begin_pjs;			//起始位置
		std::vector<double> step_pjs;			//目标位置
	};
    auto MoveS::prepareNrt()->void
	{
		MoveSParam param;
		param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
		param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
		param.step_pjs.resize(controller()->motorPool().size(), 0.0);
		param.pos = 0.0;
		param.time = 0.0;
		param.timenum = 0;

		//解析指令参数
        for (auto &p : cmdParams())	{
            if (p.first == "all") {
                std::fill(param.active_motor.begin(), param.active_motor.end(), true);
			}
            else if (p.first == "motion_id") {
                param.active_motor.at(int32Param(p.first)) = true;
			}
            else if (p.first == "pos") {
                if (p.second == "current_pos") {
					param.pos = 0;
				}
                else {
					param.pos = doubleParam(p.first);
                    param.time = std::abs(doubleParam(p.first));
				}

			}
            else if (p.first == "timenum") {
                param.timenum = doubleParam(p.first);
			}
		}
		
		this->param() = param;
		std::vector<std::pair<std::string, std::any>> ret_value;
		ret() = ret_value;
	}
    auto MoveS::executeRT()->int
	{
        auto &param = std::any_cast<MoveSParam&>(this->param());
		auto time = static_cast<int32_t>(param.time * 1000);		//运行周期
        auto totaltime = static_cast<int32_t>(param.timenum * time);//运行总时       
        controller()->motorPool().at(0).setTargetToq(0.001);

        //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
        return totaltime - count();
	}
	auto MoveS::collectNrt()->void {}
	MoveS::~MoveS() = default;
    MoveS::MoveS(const std::string &name)
	{
		//构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
		//1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
		//2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
		//3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
			"<Command name=\"mvs\">"
			"	<GroupParam>"
            "		<Param name=\"pos\" default=\"current_pos\"/>"
            "		<Param name=\"timenum\" default=\"2\" abbreviation=\"n\"/>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
			"</Command>");
	}

    //Move Single Motor (Unit: angle): for test using
    struct MoveLegParam
        {
            double pos;
            double time;
            double timenum;
            std::vector<bool> active_motor;			//目标电机
            std::vector<double> begin_pjs;			//起始位置
            std::vector<double> step_pjs;			//目标位置
        };
    auto MoveLeg::prepareNrt()->void
        {
            MoveSParam param;
            param.active_motor.clear();
            param.active_motor.resize(controller()->motorPool().size(), false);
            param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
            param.step_pjs.resize(controller()->motorPool().size(), 0.0);
            param.pos = 0.0;
            param.time = 0.0;
            param.timenum = 0.0;

            //解析指令参数
            for (auto &p : cmdParams())	{
                if (p.first == "all") {
                    std::fill(param.active_motor.begin(), param.active_motor.end(), true);
                }
                else if (p.first == "motion_id") {
                    param.active_motor.at(int32Param(p.first)) = true;
                }
                else if (p.first == "pos") {
                    if (p.second == "current_pos") {
                        param.pos = 0;
                    }
                    else {
                        param.pos = doubleParam(p.first) * PI / 180 / 2;
                    }

                }
                else if (p.first == "time") {
                    param.time = doubleParam(p.first) * 2;
                }
                else if (p.first == "timenum") {
                    param.timenum = doubleParam(p.first);
                }
            }

            this->param() = param;
            std::vector<std::pair<std::string, std::any>> ret_value;
            ret() = ret_value;
        }
    auto MoveLeg::executeRT()->int
        {
            auto &param = std::any_cast<MoveSParam&>(this->param());
            auto time = static_cast<int32_t>(param.time * 1000);		//运行周期
            auto totaltime = static_cast<int32_t>(param.timenum * time);//运行总时间

            //第一个周期设置log文件名称，获取当前电机所在位置
            if (count() == 1){
                ecMaster()->logFileRawName("mvleg_motion_replay");
                //for (Size i = 0; i < param.active_motor.size(); ++i) {
                for (Size i = 0; i < 12; ++i) {
                    if (param.active_motor[i]) {
                        param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                    }
                }
            }

            //1-cos(theta)轨迹运行
            //for (Size i = 0; i < param.active_motor.size(); ++i) {
            for (Size i = 0; i < 12; ++i) {
                if (param.active_motor[i]) {
                    param.step_pjs[i] = param.begin_pjs[i] + param.pos*(1.0 - std::cos(2.0 * PI*count() / time));
                    controller()->motorPool().at(i).setTargetPos(param.step_pjs[i]);
                }
            }
            //io
    //        uint16_t digital_output = 0x01;
    //        ecMaster()->slavePool().at(0).readPdo(0x6041, 0x00, digital_output);
    //        ecMaster()->slavePool().at(0).writePdo(0x6040, 0x00, digital_output);

            //打印
            auto &cout = mout();
            if (count() % 100 == 0){
                //for (int i = 0; i < param.active_motor.size(); i++){
                for (int i = 0; i < 11; i++){
                    if(param.active_motor[i]){
                        cout << "motor:" << i << std::setprecision(10) << param.step_pjs[i] << "  ";
                        cout << "motor:" << i << std::setprecision(10) << controller()->motorPool()[i].actualPos() << "  ";
                        cout << "motor:" << i << std::setprecision(10) << controller()->motorPool()[i].actualVel() << "  ";
                        cout << "motor:" << i << std::setprecision(10) << controller()->motorPool()[i].actualCur() << "  ";
                        cout << "motor:" << i << std::setprecision(10) << controller()->motorPool()[i].actualToq() << "  ";
                        cout << std::endl;
                    }
                }
                cout << std::endl;
            }

            //记录
            auto &lout = ecMaster()->lout();
            for(int i = 0; i < 12;i++){
                lout << std::setprecision(2) << i << " "; // "motor: "
                lout << std::setprecision(10) << controller()->motorPool()[i].targetPos()<<"  "; //"targetpos: "
                lout << std::setprecision(10) << controller()->motorPool()[i].actualPos()<<"  "; //"actualPos: "

                lout << std::setprecision(10) << controller()->motorPool()[i].targetVel()<<"  "; //"targetVel: "
                lout << std::setprecision(10) << controller()->motorPool()[i].actualVel()<<"  "; //"actualVel: "

                lout << std::setprecision(10) << controller()->motorPool()[i].targetToq()<<"  "; //"targetToq: "
                lout << std::setprecision(10) << controller()->motorPool()[i].actualToq()<<"  "; //"actualToq: "

                lout << std::setprecision(10) << controller()->motorPool()[i].actualCur()<<"  "; // "actualCur: "
                lout << std::endl;
            }
            lout << std::endl;

            //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
            return totaltime - count();
        }
    auto MoveLeg::collectNrt()->void {}
    MoveLeg::~MoveLeg() = default;
    MoveLeg::MoveLeg(const std::string &name)
        {
            //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
            //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
            //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
            //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
            aris::core::fromXmlString(command(),
                "<Command name=\"mvleg\">"
                "	<GroupParam>"
                "		<Param name=\"pos\" default=\"current_pos\"/>"
                "		<Param name=\"time\" default=\"10.0\" abbreviation=\"t\"/>"
                "		<Param name=\"timenum\" default=\"0.5\" abbreviation=\"n\"/>"
                "		<UniqueParam default=\"all\">"\
                "			<Param name=\"all\" abbreviation=\"a\"/>"\
                "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
                "		</UniqueParam>"
                "	</GroupParam>"
                "</Command>");
        }

    //get current pos
    struct GetPosParam
    {
        std::vector<bool> active_motor;			//目标电机
        std::vector<double> begin_pjs;			//起始位置
        std::vector<double> step_pjs;			//目标位置
    };
    auto GetPos::prepareNrt()->void
    {
        GetPosParam param;
        param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
        param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
        param.step_pjs.resize(controller()->motorPool().size(), 0.0);
        //解析指令参数
        for (auto &p : cmdParams())	{
                if (p.first == "all") {
                    std::fill(param.active_motor.begin(), param.active_motor.end(), true);
                }
                else if (p.first == "motion_id") {
                    param.active_motor.at(int32Param(p.first)) = true;
                }
            }
        this->param() = param;
        std::vector<std::pair<std::string, std::any>> ret_value;
        ret() = ret_value;
    }
    auto GetPos::executeRT()->int
    {
        auto &param = std::any_cast<GetPosParam&>(this->param());
        //第一个周期设置log文件名称，获取当前电机所在位置
        if (count() == 1){
            ecMaster()->logFileRawName("motion_replay");
            //for (Size i = 0; i < param.active_motor.size(); ++i) {
            for (Size i = 0; i < 12; ++i) {
                if (param.active_motor[i]) {
                    param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                    mout() << "motor " << i << " beginpos: " << std::setprecision(10) << param.begin_pjs[i] << "  "<<std::endl;
                }
            }
        }
        //返回0表示正常结束
        return 1 - count();
    }
    auto GetPos::collectNrt()->void {
        double cur_pos[4][3];
        ifstream inFile("RobotParam", ios::in);
        if (!inFile.is_open()) {
            mout() << "Can not open the parameter file." << endl;
        }
        mout() << "Current position of four feet:" << endl;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                inFile >> cur_pos[i][j];
                mout() << cur_pos[i][j] << " ";
            }
            mout() << endl;
        }
        inFile.close();
    }
    GetPos::~GetPos() = default;
    GetPos::GetPos(const std::string &name)
    {
        aris::core::fromXmlString(command(),
            "<Command name=\"getpos\">"
            "	<GroupParam>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }

    //Initialize
    struct InitParam
        {
            std::vector<bool> active_motor;			//目标电机
            std::vector<double> begin_pjs;			//起始位置
            std::vector<double> step_pjs;			//目标位置
            double initT[12];
            double maxT;
        };
    auto FindHome::prepareNrt()->void
        {
            InitParam param;
            param.active_motor.clear();
            param.active_motor.resize(controller()->motorPool().size(), false);
            param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
            param.step_pjs.resize(controller()->motorPool().size(), 0.0);
            //解析指令参数
            for (auto &p : cmdParams())	{
                    if (p.first == "all") {
                        std::fill(param.active_motor.begin(), param.active_motor.end(), true);
                    }
                    else if (p.first == "motion_id") {
                        param.active_motor.at(int32Param(p.first)) = true;
                    }
                }
            this->param() = param;
            std::vector<std::pair<std::string, std::any>> ret_value;
            ret() = ret_value;
        }
    auto FindHome::executeRT()->int
        {             
        //New Method: to be update.

//        auto &param = std::any_cast<InitParam&>(this->param());
//            param.maxT = 0.0;
//            //第一个周期设置log文件名称，获取当前电机所在位置
//            if (count() == 1){
//                ecMaster()->logFileRawName("motion_replay");
//                for (Size i = 0; i < 12; ++i) {
//                    if (param.active_motor[i]) {
//                        param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
//                        std::cout << "motion:" << i << std::setprecision(10) << " begin_pjs:" << param.begin_pjs[i] << "  "<<std::endl;
//                        if(i % 3 == 0){
//                            param.initT[i] = abs(param.begin_pjs[i] / 6.0) * 1000;
//                        }
//                        else{
//                            param.initT[i] = abs(param.begin_pjs[i] * 180.0 / PI / 10.0) * 1000;
//                        }
//                    }
//                    param.maxT = max(param.maxT, param.initT[i]);
//                    std::cout << "motion:" << i  << " initT:" << param.initT[i] << "  "<<std::endl;
//                    param.step_pjs[i] = param.begin_pjs[i];
//                }
//            }
//            auto totaltime = static_cast<int32_t>(param.maxT);    //运行总时间
//            std::cout << " totaltime:" << totaltime << "  "<<std::endl;

//            for (Size i = 0; i < 12; ++i) {
//                if (param.active_motor[i] && abs(param.step_pjs[i]) > 1e-5) {
//                    param.step_pjs[i] = param.begin_pjs[i] - (param.begin_pjs[i] / 2.0) * (1.0 - std::cos(PI*count() / param.initT[i]));
//                    std::cout << "motion:" << i << std::setprecision(10) << " targetpos:" << param.step_pjs[i] << "  "<<std::endl;
//                    controller()->motorPool().at(i).setTargetPos(param.step_pjs[i]);
//                }
//            }
//            //返回0表示正常结束
//            return totaltime - count();

            auto time = static_cast<int32_t>(24000);
            auto totaltime = static_cast<int32_t>(12000);    //运行总时间
            auto &param = std::any_cast<InitParam&>(this->param());
            //第一个周期设置log文件名称，获取当前电机所在位置
            if (count() == 1){
                ecMaster()->logFileRawName("motion_replay");
                //for (Size i = 0; i < param.active_motor.size(); ++i) {
                for (Size i = 0; i < 12; ++i) {
                    if (param.active_motor[i]) {
                        param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                        mout() << "motor " << i << " beginpos: " << std::setprecision(10) << param.begin_pjs[i] << "  "<<std::endl;
                    }
                }
            }
            for (Size i = 0; i < 12; ++i) {
                if (param.active_motor[i] && abs(param.begin_pjs[i]) > 1e-5) {
                    param.step_pjs[i] = param.begin_pjs[i] - (param.begin_pjs[i] / 2.0) * (1.0 - std::cos(2.0 * PI*count() / time));
                    controller()->motorPool().at(i).setTargetPos(param.step_pjs[i]);
                }
            }

            //返回0表示正常结束
            return totaltime - count();
        }
    auto FindHome::collectNrt()->void {
        // 重置足端初始位置,文件寫入
        double initPos[4][3] = {{0.441840698, 0.0, -0.445142639},
                                {0.441840698, 0.0, -0.445142639},
                                {0.441840698, 0.0, -0.445142639},
                                {0.441840698, 0.0, -0.445142639}};
        ofstream outFile("RobotParam", ios::trunc);
        if(!outFile.is_open()){
            mout() << "Can not open the parameter file." << endl;
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 2; j++) {
                outFile << initPos[i][j] << " ";
            }
            outFile << initPos[i][2] << endl;
        }
        outFile.close();
        mout() << "Finish Init" << endl;
    }
    FindHome::~FindHome() = default;
    FindHome::FindHome(const std::string &name)
    {
        //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
        //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
        //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
        //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
            "<Command name=\"init\">"
            "	<GroupParam>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }

    //Move Single Leg: along the points obtained by simulation
    struct MoveSingleParam
    {
        std::vector<bool> active_motor;			//目标电机
        std::vector<double> begin_pjs;			//起始位置
        std::vector<double> step_pjs;			//目标位置

        CubicSpline cs;
        CubicSpline cs1;
        CubicSpline cs2;
        CubicSpline cs3;
        CubicSpline cs4;
        CubicSpline cs5;
        CubicSpline cs6;
        CubicSpline cs7;
        CubicSpline cs8;
        CubicSpline cs9;
        CubicSpline cs10;
        CubicSpline cs11;

        //指的是绝对值，即所有值减去第一个值，不能用相邻两个值之差!!!
        static const int data_num = 721;
        static const int scale_size = 12000;

        double delta0[data_num] = {0.000,0.507,1.960,4.263,7.321,11.042,15.330,20.090,25.225,30.634,36.210,41.844,47.422,52.826,57.932,62.614,66.741,70.180,72.799,74.464,75.048,75.135,75.386,75.784,76.312,76.954,77.694,78.515,79.399,80.330,81.290,82.259,83.218,84.146,85.022,85.825,86.533,87.122,87.570,87.855,87.955,86.693,83.338,78.561,73.030,67.394,62.265,58.214,55.774,55.450,57.739,62.965,70.691,80.309,91.205,102.727,114.163,124.707,133.457,139.433,141.637,141.161,139.809,137.699,134.958,131.712,128.084,124.188,120.132,116.010,111.912,107.915,104.092,100.506,97.219,94.287,91.764,89.704,88.160,87.189,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.817,86.726,86.591,86.432,86.268,86.120,86.004,85.935,85.922,85.973,86.088,86.262,86.486,86.748,87.028,87.307,87.561,87.768,87.906,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,86.693,83.338,78.561,73.030,67.394,62.265,58.214,55.774,55.450,57.739,62.965,70.691,80.309,91.204,102.727,114.163,124.707,133.457,139.433,141.637,141.161,139.809,137.699,134.958,131.712,128.084,124.188,120.132,116.010,111.912,107.915,104.092,100.506,97.219,94.287,91.764,89.704,88.160,87.189,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.817,86.726,86.591,86.432,86.268,86.120,86.004,85.935,85.922,85.973,86.088,86.262,86.486,86.748,87.028,87.307,87.561,87.768,87.906,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,86.693,83.338,78.561,73.030,67.394,62.265,58.214,55.774,55.450,57.739,62.965,70.691,80.309,91.204,102.727,114.163,124.707,133.457,139.433,141.637,141.161,139.809,137.699,134.958,131.712,128.084,124.188,120.132,116.010,111.912,107.915,104.092,100.506,97.219,94.287,91.764,89.704,88.160,87.189,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.817,86.726,86.591,86.432,86.268,86.120,86.004,85.935,85.922,85.973,86.088,86.262,86.486,86.748,87.028,87.307,87.561,87.768,87.906,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,86.693,83.338,78.561,73.030,67.394,62.265,58.214,55.774,55.450,57.739,62.965,70.691,80.309,91.205,102.727,114.163,124.707,133.457,139.433,141.637,141.161,139.809,137.699,134.958,131.712,128.084,124.188,120.132,116.010,111.912,107.915,104.092,100.506,97.219,94.287,91.764,89.704,88.160,87.189,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.817,86.726,86.591,86.432,86.268,86.120,86.004,85.935,85.922,85.973,86.088,86.262,86.486,86.748,87.028,87.307,87.561,87.768,87.906,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,86.693,83.338,78.561,73.030,67.394,62.265,58.214,55.774,55.450,57.739,62.965,70.691,80.309,91.204,102.727,114.162,124.707,133.457,139.433,141.637,141.161,139.809,137.699,134.958,131.712,128.084,124.188,120.132,116.010,111.912,107.915,104.092,100.506,97.219,94.287,91.764,89.704,88.160,87.189,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.851,86.817,86.726,86.591,86.432,86.268,86.120,86.004,85.935,85.922,85.973,86.088,86.262,86.486,86.748,87.028,87.307,87.561,87.768,87.906,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955};
        double delta1[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.248,23.292,23.363,23.458,23.575,23.711,23.865,24.033,24.213,24.402,24.596,24.790,24.981,25.164,25.334,25.485,25.611,25.709,25.771,25.793,25.511,24.809,23.913,23.041,22.387,22.113,22.357,23.236,24.862,27.362,30.837,35.188,40.290,46.043,52.342,59.038,65.864,72.292,77.309,79.342,78.856,77.512,75.517,73.079,70.373,67.537,64.668,61.838,59.097,56.482,54.021,51.737,49.649,47.773,46.129,44.732,43.604,42.764,42.239,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,41.919,41.526,40.911,40.109,39.154,38.081,36.923,35.713,34.480,33.251,32.053,30.907,29.835,28.855,27.983,27.237,26.629,26.176,25.891,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.511,24.809,23.913,23.041,22.387,22.113,22.357,23.236,24.862,27.362,30.837,35.187,40.290,46.043,52.342,59.038,65.864,72.292,77.309,79.342,78.856,77.512,75.517,73.079,70.373,67.537,64.668,61.838,59.097,56.482,54.021,51.737,49.649,47.773,46.129,44.732,43.604,42.764,42.239,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,41.919,41.526,40.911,40.109,39.154,38.081,36.923,35.713,34.480,33.251,32.053,30.907,29.835,28.855,27.983,27.237,26.629,26.176,25.891,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.511,24.809,23.913,23.041,22.387,22.113,22.357,23.236,24.862,27.362,30.837,35.188,40.290,46.043,52.342,59.038,65.864,72.292,77.309,79.342,78.856,77.512,75.517,73.079,70.373,67.537,64.668,61.838,59.097,56.482,54.021,51.737,49.649,47.773,46.129,44.732,43.604,42.764,42.239,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,41.919,41.526,40.911,40.109,39.154,38.081,36.923,35.713,34.480,33.251,32.053,30.907,29.835,28.855,27.983,27.237,26.629,26.176,25.891,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.511,24.809,23.913,23.041,22.387,22.113,22.357,23.236,24.862,27.362,30.837,35.188,40.290,46.043,52.342,59.038,65.864,72.292,77.309,79.342,78.856,77.512,75.517,73.079,70.373,67.537,64.668,61.838,59.097,56.482,54.021,51.737,49.649,47.773,46.129,44.732,43.604,42.764,42.239,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,41.919,41.526,40.911,40.109,39.154,38.081,36.923,35.713,34.480,33.251,32.053,30.907,29.835,28.855,27.983,27.237,26.629,26.176,25.891,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.511,24.809,23.913,23.041,22.387,22.113,22.357,23.236,24.862,27.362,30.837,35.187,40.290,46.043,52.342,59.038,65.864,72.292,77.309,79.342,78.856,77.512,75.517,73.079,70.373,67.537,64.668,61.838,59.097,56.482,54.021,51.737,49.649,47.773,46.129,44.732,43.604,42.764,42.239,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,41.919,41.526,40.911,40.109,39.154,38.081,36.923,35.713,34.480,33.251,32.053,30.907,29.835,28.855,27.983,27.237,26.629,26.176,25.891,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793};
        double delta2[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.315,23.552,23.927,24.422,25.022,25.710,26.471,27.287,28.142,29.019,29.901,30.770,31.608,32.398,33.119,33.753,34.280,34.680,34.935,35.024,34.487,33.070,31.076,28.800,26.500,24.396,22.674,21.493,20.999,21.341,22.631,24.767,27.609,31.030,34.889,39.003,43.104,46.791,49.494,50.536,50.206,49.276,47.847,46.028,43.919,41.612,39.184,36.699,34.211,31.763,29.395,27.141,25.033,23.101,21.375,19.886,18.667,17.751,17.173,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.085,17.410,17.927,18.617,19.464,20.448,21.551,22.753,24.032,25.365,26.726,28.087,29.419,30.688,31.862,32.904,33.778,34.447,34.874,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.487,33.070,31.076,28.800,26.500,24.396,22.674,21.493,20.999,21.341,22.631,24.767,27.609,31.030,34.889,39.003,43.104,46.791,49.494,50.536,50.206,49.276,47.847,46.028,43.919,41.612,39.184,36.699,34.211,31.763,29.395,27.141,25.033,23.101,21.375,19.886,18.667,17.751,17.173,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.085,17.410,17.927,18.617,19.464,20.448,21.551,22.753,24.032,25.365,26.726,28.087,29.419,30.688,31.862,32.904,33.778,34.447,34.874,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.487,33.070,31.076,28.800,26.500,24.397,22.674,21.493,20.999,21.341,22.631,24.767,27.609,31.030,34.889,39.003,43.104,46.791,49.494,50.536,50.206,49.276,47.847,46.028,43.919,41.612,39.184,36.699,34.211,31.763,29.395,27.141,25.033,23.101,21.375,19.886,18.667,17.751,17.173,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.085,17.410,17.927,18.617,19.464,20.448,21.551,22.753,24.032,25.365,26.726,28.087,29.419,30.688,31.862,32.904,33.778,34.447,34.874,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.487,33.070,31.076,28.800,26.500,24.397,22.674,21.493,20.999,21.341,22.631,24.767,27.609,31.030,34.889,39.003,43.104,46.791,49.493,50.536,50.206,49.276,47.847,46.028,43.919,41.612,39.184,36.699,34.211,31.763,29.395,27.141,25.033,23.101,21.375,19.886,18.667,17.751,17.173,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.085,17.410,17.927,18.617,19.464,20.448,21.551,22.753,24.032,25.365,26.726,28.087,29.419,30.688,31.862,32.904,33.778,34.447,34.874,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.487,33.070,31.076,28.800,26.500,24.397,22.674,21.493,20.999,21.341,22.631,24.767,27.609,31.030,34.889,39.003,43.104,46.791,49.494,50.536,50.206,49.276,47.847,46.028,43.919,41.612,39.184,36.699,34.211,31.763,29.395,27.141,25.033,23.101,21.375,19.886,18.667,17.751,17.173,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.085,17.410,17.927,18.617,19.464,20.448,21.551,22.753,24.032,25.365,26.726,28.087,29.419,30.688,31.862,32.904,33.778,34.447,34.874,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024};

        double delta3[data_num] = {0.000,0.507,1.960,4.263,7.321,11.042,15.330,20.090,25.225,30.634,36.210,41.844,47.422,52.826,57.932,62.614,66.741,70.180,72.799,74.464,75.048,74.960,74.710,74.317,73.800,73.180,72.476,71.707,70.894,70.054,69.205,68.364,67.549,66.774,66.056,65.409,64.848,64.386,64.038,63.819,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.745,63.755,63.782,63.835,63.927,64.070,64.273,64.543,64.883,65.291,65.762,66.285,66.842,67.414,67.976,68.500,68.958,69.318,69.553,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,68.304,64.749,59.652,53.700,47.559,41.863,37.207,34.142,33.185,34.839,39.413,46.448,55.311,65.378,76.001,86.492,96.107,104.037,109.426,111.409,111.011,109.878,108.106,105.794,103.043,99.951,96.613,93.117,89.545,85.973,82.472,79.106,75.936,73.018,70.406,68.151,66.305,64.919,64.046,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.745,63.755,63.782,63.835,63.927,64.070,64.273,64.543,64.883,65.291,65.762,66.285,66.842,67.414,67.976,68.500,68.958,69.319,69.553,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,68.304,64.749,59.652,53.700,47.559,41.863,37.207,34.142,33.185,34.839,39.413,46.448,55.311,65.378,76.001,86.492,96.107,104.037,109.426,111.409,111.011,109.878,108.106,105.794,103.043,99.951,96.613,93.117,89.545,85.973,82.472,79.106,75.936,73.018,70.406,68.151,66.305,64.919,64.046,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.745,63.755,63.782,63.835,63.927,64.070,64.273,64.543,64.883,65.291,65.762,66.285,66.842,67.414,67.976,68.500,68.958,69.319,69.553,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,68.304,64.749,59.652,53.700,47.559,41.863,37.207,34.142,33.185,34.839,39.413,46.448,55.311,65.378,76.001,86.492,96.107,104.037,109.426,111.409,111.011,109.878,108.106,105.794,103.043,99.951,96.613,93.117,89.545,85.973,82.472,79.106,75.936,73.018,70.406,68.151,66.305,64.919,64.046,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.745,63.755,63.782,63.835,63.927,64.070,64.273,64.543,64.883,65.291,65.762,66.285,66.842,67.414,67.976,68.500,68.958,69.319,69.553,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,68.304,64.749,59.652,53.700,47.559,41.863,37.207,34.142,33.185,34.839,39.413,46.448,55.311,65.378,76.001,86.492,96.107,104.037,109.426,111.409,111.011,109.878,108.106,105.794,103.043,99.951,96.613,93.117,89.545,85.973,82.472,79.106,75.936,73.018,70.406,68.151,66.305,64.919,64.046,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.745,63.755,63.782,63.835,63.927,64.070,64.273,64.543,64.883,65.291,65.762,66.285,66.842,67.414,67.976,68.500,68.958,69.319,69.553,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,69.637,68.304,64.749,59.652,53.700,47.559,41.863,37.207,34.142,33.185,34.839,39.413,46.448,55.311,65.378,76.001,86.492,96.107,104.037,109.426,111.409,111.011,109.878,108.106,105.794,103.043,99.951,96.613,93.117,89.545,85.973,82.472,79.106,75.936,73.018,70.406,68.151,66.305,64.919,64.046,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742,63.742};
        double delta4[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.150,22.914,22.541,22.050,21.458,20.782,20.041,19.251,18.430,17.594,16.760,15.945,15.164,14.434,13.772,13.194,12.716,12.354,12.125,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.177,12.558,13.163,13.969,14.953,16.094,17.366,18.746,20.208,21.723,23.263,24.797,26.289,27.707,29.012,30.167,31.133,31.870,32.340,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,31.956,30.497,28.423,26.020,23.546,21.225,19.250,17.789,16.995,17.020,17.966,19.716,22.114,25.009,28.241,31.617,34.890,37.740,39.765,40.530,40.286,39.592,38.512,37.113,35.460,33.615,31.635,29.571,27.467,25.365,23.302,21.312,19.429,17.685,16.113,14.747,13.621,12.770,12.232,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.177,12.558,13.163,13.969,14.953,16.094,17.366,18.746,20.208,21.723,23.263,24.797,26.289,27.707,29.012,30.167,31.133,31.870,32.340,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,31.956,30.497,28.423,26.020,23.546,21.225,19.250,17.789,16.995,17.020,17.966,19.716,22.114,25.009,28.241,31.617,34.890,37.740,39.765,40.530,40.286,39.592,38.512,37.113,35.460,33.615,31.635,29.571,27.467,25.365,23.302,21.312,19.429,17.685,16.113,14.747,13.621,12.770,12.232,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.177,12.558,13.163,13.969,14.953,16.094,17.366,18.746,20.208,21.723,23.263,24.796,26.289,27.707,29.012,30.167,31.133,31.870,32.340,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,31.956,30.497,28.423,26.020,23.546,21.225,19.250,17.789,16.995,17.020,17.966,19.716,22.114,25.009,28.241,31.617,34.890,37.740,39.765,40.530,40.286,39.592,38.512,37.113,35.460,33.615,31.635,29.571,27.467,25.365,23.302,21.312,19.429,17.685,16.113,14.747,13.621,12.770,12.232,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.177,12.558,13.163,13.969,14.953,16.094,17.366,18.746,20.208,21.723,23.263,24.796,26.289,27.707,29.012,30.167,31.133,31.870,32.340,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,31.956,30.497,28.423,26.020,23.546,21.225,19.250,17.789,16.995,17.020,17.966,19.716,22.114,25.009,28.241,31.617,34.890,37.740,39.765,40.530,40.286,39.592,38.512,37.113,35.460,33.615,31.635,29.571,27.467,25.365,23.302,21.312,19.429,17.685,16.113,14.747,13.621,12.770,12.232,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.177,12.558,13.163,13.969,14.953,16.094,17.366,18.746,20.208,21.723,23.263,24.796,26.289,27.707,29.012,30.167,31.133,31.870,32.340,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,32.505,31.956,30.497,28.423,26.020,23.546,21.225,19.250,17.789,16.995,17.020,17.966,19.716,22.114,25.009,28.241,31.617,34.890,37.740,39.765,40.530,40.286,39.592,38.512,37.113,35.460,33.615,31.635,29.571,27.467,25.365,23.302,21.312,19.429,17.685,16.113,14.747,13.621,12.770,12.232,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045,12.045};
        double delta5[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.217,23.174,23.105,23.016,22.911,22.794,22.668,22.537,22.406,22.276,22.151,22.033,21.924,21.825,21.739,21.666,21.607,21.564,21.536,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.404,21.054,20.505,19.789,18.935,17.975,16.939,15.855,14.751,13.651,12.579,11.556,10.600,9.728,8.955,8.294,7.757,7.357,7.106,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,6.750,6.076,5.207,4.347,3.685,3.384,3.582,4.395,5.928,8.278,11.500,15.440,19.915,24.756,29.786,34.793,39.491,43.492,46.296,47.346,47.113,46.452,45.427,44.104,42.550,40.826,38.988,37.084,35.160,33.251,31.393,29.615,27.945,26.410,25.037,23.851,22.879,22.148,21.688,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.404,21.054,20.505,19.789,18.935,17.975,16.939,15.855,14.751,13.651,12.579,11.556,10.600,9.728,8.955,8.294,7.757,7.357,7.106,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,6.750,6.076,5.207,4.347,3.685,3.384,3.582,4.395,5.928,8.278,11.500,15.440,19.915,24.756,29.786,34.793,39.491,43.492,46.296,47.346,47.113,46.452,45.427,44.104,42.550,40.826,38.988,37.084,35.160,33.251,31.393,29.615,27.945,26.410,25.037,23.851,22.879,22.148,21.688,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.404,21.054,20.505,19.789,18.935,17.975,16.939,15.855,14.751,13.651,12.579,11.556,10.600,9.728,8.955,8.294,7.757,7.357,7.106,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,6.750,6.076,5.207,4.347,3.685,3.384,3.582,4.395,5.928,8.278,11.500,15.440,19.915,24.756,29.786,34.793,39.491,43.492,46.296,47.346,47.113,46.452,45.427,44.104,42.550,40.826,38.988,37.084,35.160,33.251,31.393,29.615,27.945,26.410,25.037,23.851,22.879,22.148,21.688,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.404,21.054,20.505,19.789,18.935,17.975,16.939,15.855,14.751,13.651,12.579,11.556,10.600,9.728,8.955,8.294,7.757,7.357,7.106,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,6.750,6.076,5.207,4.347,3.685,3.384,3.582,4.395,5.928,8.278,11.500,15.440,19.915,24.756,29.786,34.793,39.491,43.492,46.296,47.346,47.113,46.452,45.427,44.104,42.550,40.826,38.988,37.084,35.160,33.251,31.393,29.615,27.945,26.410,25.037,23.851,22.879,22.148,21.688,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.404,21.054,20.505,19.789,18.935,17.975,16.939,15.855,14.751,13.651,12.579,11.556,10.600,9.728,8.955,8.294,7.757,7.357,7.106,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,7.019,6.750,6.076,5.207,4.347,3.685,3.384,3.582,4.395,5.928,8.278,11.500,15.440,19.915,24.756,29.786,34.793,39.491,43.492,46.296,47.346,47.113,46.452,45.427,44.104,42.550,40.826,38.988,37.084,35.160,33.251,31.393,29.615,27.945,26.410,25.037,23.851,22.879,22.148,21.688,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527,21.527};

        double delta6[data_num] = {0.000, 0.507, 1.960, 4.263, 7.322, 11.042, 15.330, 20.090, 25.225, 30.634, 36.210, 41.844, 47.422, 52.826, 57.932, 62.614, 66.741, 70.180, 72.799, 74.464, 75.048, 74.960, 74.710, 74.317, 73.800, 73.180, 72.476, 71.707, 70.894, 70.054, 69.205, 68.364, 67.549, 66.775, 66.056, 65.409, 64.848, 64.386, 64.038, 63.819, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 64.046, 64.919, 66.305, 68.151, 70.406, 73.018, 75.936, 79.106, 82.472, 85.973, 89.545, 93.117, 96.613, 99.951, 103.043, 105.794, 108.106, 109.878, 111.011, 111.409, 109.840, 105.618, 99.485, 92.179, 84.400, 76.813, 70.044, 64.701, 61.388, 60.729, 61.679, 62.738, 63.875, 65.046, 66.202, 67.284, 68.230, 68.977, 69.464, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.553, 69.318, 68.958, 68.500, 67.975, 67.414, 66.842, 66.284, 65.762, 65.291, 64.883, 64.543, 64.273, 64.070, 63.928, 63.835, 63.782, 63.756, 63.745, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 64.046, 64.919, 66.305, 68.151, 70.406, 73.018, 75.936, 79.106, 82.472, 85.973, 89.545, 93.117, 96.613, 99.951, 103.043, 105.794, 108.106, 109.878, 111.011, 111.409, 109.426, 104.037, 96.107, 86.492, 76.001, 65.378, 55.311, 46.448, 39.413, 34.839, 33.185, 34.141, 37.207, 41.863, 47.559, 53.699, 59.652, 64.748, 68.304, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.553, 69.318, 68.958, 68.500, 67.975, 67.414, 66.842, 66.284, 65.762, 65.291, 64.883, 64.543, 64.273, 64.070, 63.928, 63.835, 63.782, 63.756, 63.745, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 64.046, 64.919, 66.305, 68.151, 70.406, 73.018, 75.936, 79.106, 82.472, 85.973, 89.545, 93.117, 96.613, 99.951, 103.043, 105.794, 108.106, 109.878, 111.011, 111.409, 109.426, 104.037, 96.107, 86.492, 76.001, 65.378, 55.311, 46.448, 39.413, 34.839, 33.185, 34.141, 37.207, 41.863, 47.559, 53.699, 59.652, 64.748, 68.304, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.553, 69.318, 68.958, 68.500, 67.975, 67.414, 66.842, 66.284, 65.762, 65.291, 64.883, 64.543, 64.273, 64.070, 63.928, 63.835, 63.782, 63.756, 63.745, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 64.046, 64.919, 66.305, 68.151, 70.406, 73.018, 75.936, 79.106, 82.472, 85.973, 89.545, 93.117, 96.613, 99.951, 103.043, 105.794, 108.106, 109.878, 111.011, 111.409, 109.426, 104.037, 96.107, 86.492, 76.001, 65.378, 55.311, 46.448, 39.413, 34.839, 33.185, 34.141, 37.207, 41.863, 47.559, 53.699, 59.652, 64.748, 68.304, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.553, 69.318, 68.958, 68.500, 67.975, 67.414, 66.842, 66.284, 65.762, 65.291, 64.883, 64.543, 64.273, 64.070, 63.928, 63.835, 63.782, 63.756, 63.745, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 64.046, 64.919, 66.305, 68.151, 70.406, 73.018, 75.936, 79.106, 82.472, 85.973, 89.545, 93.117, 96.613, 99.951, 103.043, 105.794, 108.106, 109.878, 111.011, 111.409, 109.426, 104.037, 96.107, 86.492, 76.001, 65.378, 55.311, 46.448, 39.413, 34.839, 33.185, 34.141, 37.207, 41.863, 47.559, 53.699, 59.652, 64.748, 68.304, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.636, 69.553, 69.318, 68.958, 68.500, 67.975, 67.414, 66.842, 66.284, 65.762, 65.291, 64.883, 64.543, 64.273, 64.070, 63.928, 63.835, 63.782, 63.756, 63.745, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742, 63.742};
        double delta7[data_num] = {0.000, 0.145, 0.562, 1.223, 2.104, 3.181, 4.429, 5.825, 7.344, 8.962, 10.650, 12.381, 14.121, 15.835, 17.482, 19.018, 20.394, 21.558, 22.455, 23.030, 23.233, 23.217, 23.174, 23.105, 23.016, 22.911, 22.794, 22.668, 22.537, 22.406, 22.276, 22.151, 22.033, 21.924, 21.825, 21.739, 21.666, 21.607, 21.564, 21.536, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.688, 22.148, 22.879, 23.851, 25.037, 26.410, 27.945, 29.615, 31.393, 33.251, 35.160, 37.084, 38.988, 40.826, 42.550, 44.104, 45.427, 46.452, 47.113, 47.346, 46.475, 44.151, 40.828, 36.923, 32.773, 28.646, 24.756, 21.294, 18.451, 16.436, 14.936, 13.497, 12.147, 10.909, 9.806, 8.858, 8.086, 7.508, 7.145, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.106, 7.357, 7.757, 8.294, 8.955, 9.728, 10.600, 11.556, 12.579, 13.651, 14.751, 15.855, 16.939, 17.975, 18.935, 19.789, 20.505, 21.054, 21.404, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.688, 22.148, 22.879, 23.851, 25.037, 26.410, 27.945, 29.615, 31.393, 33.251, 35.160, 37.084, 38.988, 40.826, 42.550, 44.104, 45.427, 46.452, 47.113, 47.346, 46.296, 43.492, 39.491, 34.793, 29.786, 24.756, 19.915, 15.440, 11.500, 8.277, 5.927, 4.395, 3.581, 3.384, 3.685, 4.347, 5.207, 6.076, 6.750, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.106, 7.357, 7.757, 8.294, 8.955, 9.728, 10.600, 11.556, 12.579, 13.651, 14.751, 15.855, 16.939, 17.975, 18.935, 19.789, 20.505, 21.054, 21.404, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.688, 22.148, 22.879, 23.851, 25.037, 26.410, 27.945, 29.615, 31.393, 33.251, 35.160, 37.084, 38.988, 40.826, 42.550, 44.104, 45.427, 46.452, 47.113, 47.346, 46.296, 43.492, 39.491, 34.793, 29.786, 24.756, 19.915, 15.440, 11.500, 8.277, 5.928, 4.395, 3.581, 3.384, 3.685, 4.347, 5.207, 6.076, 6.750, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.106, 7.357, 7.757, 8.294, 8.955, 9.728, 10.600, 11.556, 12.579, 13.651, 14.751, 15.855, 16.939, 17.975, 18.935, 19.789, 20.505, 21.054, 21.404, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.688, 22.148, 22.879, 23.851, 25.037, 26.410, 27.945, 29.615, 31.393, 33.251, 35.160, 37.084, 38.988, 40.826, 42.550, 44.104, 45.427, 46.452, 47.113, 47.346, 46.296, 43.492, 39.491, 34.793, 29.786, 24.756, 19.915, 15.440, 11.500, 8.277, 5.927, 4.395, 3.581, 3.384, 3.685, 4.347, 5.207, 6.076, 6.750, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.106, 7.357, 7.757, 8.294, 8.955, 9.728, 10.600, 11.556, 12.579, 13.651, 14.751, 15.855, 16.939, 17.975, 18.935, 19.789, 20.505, 21.054, 21.404, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.688, 22.148, 22.879, 23.851, 25.037, 26.410, 27.945, 29.615, 31.393, 33.251, 35.160, 37.084, 38.988, 40.826, 42.550, 44.104, 45.427, 46.452, 47.113, 47.346, 46.295, 43.492, 39.491, 34.793, 29.786, 24.756, 19.915, 15.440, 11.500, 8.277, 5.927, 4.395, 3.581, 3.384, 3.685, 4.347, 5.207, 6.076, 6.750, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.019, 7.106, 7.357, 7.757, 8.294, 8.955, 9.728, 10.600, 11.556, 12.579, 13.651, 14.751, 15.855, 16.939, 17.975, 18.935, 19.789, 20.505, 21.054, 21.404, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527, 21.527};
        double delta8[data_num] = {0.000, 0.145, 0.562, 1.223, 2.104, 3.181, 4.429, 5.825, 7.344, 8.962, 10.650, 12.381, 14.121, 15.835, 17.482, 19.018, 20.394, 21.558, 22.455, 23.030, 23.233, 23.150, 22.914, 22.541, 22.050, 21.458, 20.782, 20.041, 19.251, 18.430, 17.594, 16.760, 15.945, 15.164, 14.435, 13.773, 13.194, 12.716, 12.354, 12.125, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.233, 12.770, 13.621, 14.747, 16.113, 17.685, 19.429, 21.312, 23.302, 25.365, 27.467, 29.571, 31.636, 33.615, 35.460, 37.113, 38.512, 39.592, 40.286, 40.530, 39.935, 38.370, 36.185, 33.704, 31.203, 28.904, 26.994, 25.645, 25.024, 25.320, 26.179, 27.092, 28.034, 28.977, 29.886, 30.722, 31.444, 32.009, 32.375, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.340, 31.870, 31.133, 30.167, 29.012, 27.707, 26.289, 24.796, 23.263, 21.723, 20.208, 18.746, 17.366, 16.094, 14.953, 13.969, 13.163, 12.558, 12.177, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.233, 12.770, 13.621, 14.747, 16.113, 17.685, 19.429, 21.312, 23.302, 25.365, 27.467, 29.571, 31.636, 33.615, 35.460, 37.113, 38.512, 39.592, 40.286, 40.530, 39.765, 37.740, 34.890, 31.617, 28.241, 25.009, 22.114, 19.716, 17.966, 17.020, 16.995, 17.789, 19.250, 21.225, 23.546, 26.020, 28.423, 30.497, 31.956, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.340, 31.870, 31.133, 30.167, 29.012, 27.707, 26.289, 24.796, 23.263, 21.723, 20.208, 18.746, 17.366, 16.094, 14.953, 13.969, 13.163, 12.558, 12.177, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.233, 12.770, 13.621, 14.747, 16.113, 17.685, 19.429, 21.312, 23.302, 25.365, 27.467, 29.571, 31.636, 33.615, 35.460, 37.113, 38.512, 39.592, 40.286, 40.530, 39.765, 37.740, 34.890, 31.617, 28.241, 25.009, 22.114, 19.716, 17.966, 17.020, 16.995, 17.789, 19.250, 21.225, 23.546, 26.020, 28.423, 30.497, 31.956, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.340, 31.870, 31.133, 30.167, 29.012, 27.707, 26.289, 24.796, 23.263, 21.723, 20.208, 18.746, 17.366, 16.094, 14.953, 13.969, 13.163, 12.558, 12.177, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.233, 12.770, 13.621, 14.747, 16.113, 17.685, 19.429, 21.312, 23.302, 25.365, 27.467, 29.571, 31.636, 33.615, 35.460, 37.113, 38.512, 39.592, 40.286, 40.530, 39.765, 37.740, 34.890, 31.617, 28.241, 25.009, 22.114, 19.716, 17.966, 17.020, 16.995, 17.789, 19.250, 21.225, 23.546, 26.020, 28.423, 30.497, 31.956, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.340, 31.870, 31.133, 30.167, 29.012, 27.707, 26.289, 24.796, 23.263, 21.723, 20.208, 18.746, 17.366, 16.094, 14.953, 13.969, 13.163, 12.558, 12.177, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.233, 12.770, 13.621, 14.747, 16.113, 17.685, 19.429, 21.312, 23.302, 25.365, 27.467, 29.571, 31.636, 33.615, 35.460, 37.113, 38.512, 39.592, 40.286, 40.530, 39.765, 37.740, 34.890, 31.617, 28.241, 25.009, 22.114, 19.716, 17.966, 17.020, 16.995, 17.789, 19.250, 21.225, 23.546, 26.020, 28.423, 30.497, 31.956, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.505, 32.340, 31.870, 31.133, 30.167, 29.012, 27.707, 26.289, 24.796, 23.263, 21.723, 20.208, 18.746, 17.366, 16.094, 14.953, 13.969, 13.163, 12.558, 12.177, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045, 12.045};

        double delta9[data_num] = {0.000,0.507,1.960,4.263,7.321,11.042,15.330,20.090,25.225,30.634,36.210,41.844,47.422,52.826,57.932,62.614,66.741,70.180,72.799,74.464,75.048,75.135,75.386,75.784,76.312,76.954,77.694,78.515,79.399,80.331,81.290,82.259,83.218,84.146,85.022,85.825,86.533,87.122,87.570,87.856,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.906,87.769,87.562,87.307,87.028,86.748,86.486,86.262,86.088,85.973,85.922,85.934,86.004,86.120,86.268,86.431,86.591,86.725,86.817,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,87.188,88.160,89.703,91.764,94.287,97.219,100.506,104.091,107.915,111.912,116.010,120.131,124.188,128.084,131.712,134.958,137.699,139.809,141.161,141.637,139.433,133.457,124.706,114.162,102.727,91.204,80.309,70.691,62.965,57.739,55.450,55.774,58.214,62.265,67.394,73.030,78.561,83.338,86.693,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.906,87.769,87.562,87.307,87.028,86.748,86.486,86.262,86.088,85.973,85.922,85.934,86.004,86.120,86.268,86.431,86.591,86.725,86.817,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,87.188,88.160,89.703,91.764,94.287,97.219,100.506,104.091,107.915,111.912,116.010,120.131,124.188,128.084,131.712,134.958,137.699,139.809,141.161,141.637,139.433,133.457,124.706,114.162,102.727,91.204,80.309,70.691,62.965,57.739,55.449,55.774,58.214,62.265,67.394,73.030,78.561,83.338,86.693,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.906,87.769,87.562,87.307,87.028,86.748,86.486,86.262,86.088,85.973,85.922,85.934,86.004,86.120,86.268,86.431,86.591,86.725,86.817,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,87.188,88.159,89.703,91.764,94.287,97.219,100.506,104.091,107.915,111.912,116.010,120.131,124.188,128.084,131.712,134.958,137.699,139.809,141.161,141.637,139.433,133.457,124.706,114.162,102.727,91.204,80.309,70.691,62.965,57.739,55.450,55.774,58.214,62.265,67.394,73.030,78.561,83.338,86.693,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.906,87.769,87.562,87.307,87.028,86.748,86.486,86.262,86.088,85.973,85.922,85.934,86.004,86.120,86.268,86.431,86.591,86.725,86.817,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,87.188,88.159,89.703,91.764,94.287,97.219,100.506,104.091,107.915,111.912,116.010,120.131,124.188,128.084,131.712,134.958,137.699,139.809,141.161,141.637,139.433,133.457,124.706,114.162,102.727,91.204,80.309,70.691,62.965,57.739,55.449,55.774,58.214,62.265,67.394,73.030,78.561,83.338,86.693,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.955,87.906,87.769,87.562,87.307,87.028,86.748,86.486,86.262,86.088,85.973,85.922,85.934,86.004,86.120,86.268,86.431,86.591,86.725,86.817,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,86.850,87.188,88.159,89.703,91.764,94.287,97.219,100.506,104.091,107.915,111.912,116.010,120.131,124.188,128.084,131.712,134.958,137.699,139.809,141.161,141.637,139.433,133.457,124.706,114.162,102.727,91.204,80.309,70.691,62.965,57.739,55.450,55.774,58.214,62.265,67.394,73.030,78.561,83.338,86.693,87.955};
        double delta10[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.315,23.552,23.927,24.422,25.022,25.710,26.471,27.287,28.142,29.019,29.901,30.770,31.608,32.397,33.119,33.753,34.280,34.680,34.935,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.874,34.447,33.778,32.904,31.862,30.688,29.419,28.087,26.726,25.365,24.032,22.753,21.551,20.448,19.464,18.617,17.927,17.410,17.085,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.173,17.751,18.667,19.886,21.375,23.101,25.033,27.141,29.395,31.763,34.210,36.699,39.184,41.612,43.919,46.028,47.847,49.275,50.205,50.535,49.493,46.790,43.104,39.003,34.889,31.030,27.609,24.767,22.631,21.341,20.999,21.493,22.674,24.396,26.500,28.800,31.076,33.070,34.487,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.874,34.447,33.778,32.904,31.862,30.688,29.419,28.087,26.726,25.365,24.032,22.753,21.551,20.448,19.464,18.617,17.927,17.410,17.085,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.173,17.751,18.667,19.886,21.375,23.101,25.033,27.141,29.395,31.763,34.210,36.699,39.184,41.612,43.919,46.028,47.847,49.275,50.205,50.535,49.493,46.790,43.104,39.003,34.889,31.030,27.609,24.767,22.631,21.341,20.999,21.493,22.674,24.396,26.500,28.800,31.076,33.070,34.487,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.874,34.447,33.778,32.904,31.862,30.688,29.419,28.087,26.726,25.365,24.032,22.753,21.551,20.448,19.464,18.617,17.927,17.410,17.085,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.173,17.751,18.667,19.886,21.375,23.101,25.033,27.141,29.395,31.763,34.210,36.699,39.184,41.612,43.919,46.028,47.847,49.275,50.205,50.535,49.493,46.790,43.104,39.003,34.889,31.030,27.609,24.767,22.631,21.341,20.999,21.493,22.674,24.396,26.500,28.800,31.076,33.070,34.487,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.874,34.447,33.778,32.904,31.862,30.688,29.419,28.087,26.726,25.365,24.032,22.753,21.551,20.448,19.464,18.617,17.927,17.410,17.085,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.173,17.751,18.667,19.886,21.375,23.101,25.033,27.141,29.395,31.763,34.210,36.699,39.184,41.612,43.919,46.028,47.847,49.275,50.205,50.535,49.493,46.790,43.104,39.003,34.889,31.030,27.609,24.767,22.631,21.341,20.999,21.493,22.674,24.396,26.500,28.800,31.076,33.070,34.487,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,35.024,34.874,34.447,33.778,32.904,31.862,30.688,29.419,28.087,26.726,25.365,24.032,22.753,21.551,20.448,19.464,18.617,17.927,17.410,17.085,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,16.972,17.173,17.751,18.667,19.886,21.375,23.101,25.033,27.141,29.395,31.763,34.210,36.699,39.184,41.612,43.919,46.028,47.847,49.275,50.205,50.535,49.493,46.790,43.104,39.003,34.889,31.030,27.609,24.767,22.631,21.341,20.999,21.493,22.674,24.396,26.500,28.800,31.076,33.070,34.487,35.024};
        double delta11[data_num] = {0.000,0.145,0.562,1.223,2.104,3.181,4.429,5.825,7.344,8.962,10.650,12.381,14.121,15.835,17.482,19.018,20.394,21.558,22.455,23.030,23.233,23.248,23.293,23.363,23.458,23.575,23.711,23.865,24.033,24.213,24.402,24.596,24.790,24.981,25.164,25.334,25.485,25.612,25.709,25.771,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.892,26.176,26.630,27.237,27.984,28.855,29.835,30.907,32.053,33.251,34.480,35.713,36.923,38.081,39.154,40.109,40.911,41.526,41.919,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.239,42.764,43.604,44.732,46.129,47.774,49.649,51.737,54.021,56.482,59.097,61.838,64.668,67.537,70.374,73.079,75.517,77.512,78.856,79.342,77.309,72.292,65.864,59.038,52.342,46.043,40.290,35.188,30.837,27.362,24.862,23.236,22.357,22.113,22.387,23.041,23.913,24.809,25.511,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.892,26.176,26.630,27.237,27.984,28.855,29.835,30.907,32.053,33.251,34.480,35.713,36.923,38.081,39.154,40.109,40.911,41.526,41.919,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.239,42.764,43.604,44.732,46.129,47.773,49.649,51.737,54.021,56.482,59.097,61.838,64.668,67.537,70.374,73.079,75.517,77.512,78.856,79.342,77.309,72.292,65.864,59.038,52.342,46.043,40.290,35.188,30.837,27.362,24.862,23.236,22.357,22.113,22.387,23.041,23.913,24.809,25.511,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.892,26.176,26.630,27.237,27.984,28.855,29.835,30.907,32.053,33.251,34.480,35.713,36.923,38.081,39.154,40.109,40.911,41.526,41.919,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.239,42.764,43.604,44.732,46.129,47.773,49.649,51.737,54.021,56.482,59.097,61.838,64.668,67.537,70.374,73.079,75.517,77.512,78.856,79.342,77.309,72.292,65.864,59.038,52.342,46.043,40.290,35.188,30.837,27.362,24.862,23.236,22.357,22.113,22.387,23.041,23.913,24.809,25.511,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.892,26.176,26.630,27.237,27.984,28.855,29.835,30.907,32.053,33.251,34.480,35.713,36.923,38.081,39.154,40.109,40.911,41.526,41.919,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.239,42.764,43.604,44.732,46.129,47.773,49.649,51.737,54.021,56.482,59.097,61.838,64.668,67.537,70.374,73.079,75.517,77.512,78.856,79.342,77.309,72.292,65.864,59.038,52.342,46.043,40.290,35.188,30.837,27.362,24.862,23.236,22.357,22.113,22.387,23.041,23.913,24.809,25.511,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.793,25.892,26.176,26.630,27.237,27.984,28.855,29.835,30.907,32.053,33.251,34.480,35.713,36.923,38.081,39.154,40.109,40.911,41.526,41.919,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.057,42.239,42.764,43.604,44.732,46.129,47.773,49.649,51.737,54.021,56.482,59.097,61.838,64.668,67.537,70.374,73.079,75.517,77.512,78.856,79.342,77.309,72.292,65.864,59.038,52.342,46.043,40.290,35.188,30.837,27.362,24.862,23.236,22.357,22.113,22.387,23.041,23.913,24.809,25.511,25.793};

        double deltaT[data_num];

        double lastPos[12];
        double step_forward_pos[12];
        double s_size = static_cast<double>(scale_size);
    };
    auto MoveSingleLeg::prepareNrt()->void
    {
        MoveSingleParam param;
        param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
        param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
        param.step_pjs.resize(controller()->motorPool().size(), 0.0);

        for(int i = 0; i < 12; ++i){
            param.lastPos[i] = 0;
            param.step_forward_pos[i] = 0;
        }

        //Spline parameters
        for (int i = 0; i < param.data_num; i++) {
            param.deltaT[i] = 0.1 * i;
        }

        int size = param.data_num;
        param.cs.Initialize(param.deltaT, param.delta0, size);
        param.cs1.Initialize(param.deltaT, param.delta1, size);
        param.cs2.Initialize(param.deltaT, param.delta2, size);

        param.cs3.Initialize(param.deltaT, param.delta3, size);
        param.cs4.Initialize(param.deltaT, param.delta4, size);
        param.cs5.Initialize(param.deltaT, param.delta5, size);

        param.cs6.Initialize(param.deltaT, param.delta6, size);
        param.cs7.Initialize(param.deltaT, param.delta7, size);
        param.cs8.Initialize(param.deltaT, param.delta8, size);

        param.cs9.Initialize(param.deltaT, param.delta9, size);
        param.cs10.Initialize(param.deltaT, param.delta10, size);
        param.cs11.Initialize(param.deltaT, param.delta11, size);

        //解析指令参数
        for (auto &p : cmdParams())	{
            if (p.first == "all") {
                std::fill(param.active_motor.begin(), param.active_motor.end(), true);
            }
            else if (p.first == "motion_id") {
                param.active_motor.at(int32Param(p.first)) = true;
            }
        }
        this->param() = param;
        std::vector<std::pair<std::string, std::any>> ret_value;
        ret() = ret_value;
    }
    auto MoveSingleLeg::executeRT()->int
    {
        auto &param = std::any_cast<MoveSingleParam&>(this->param());
        const int totaltime = (param.data_num - 1) * param.scale_size / 10 - 1;

        Size begin_num = 0;
        Size end_num = 12;

        //第一个周期设置log文件名称，获取当前电机所在位置
        if (count() == 1){
            ecMaster()->logFileRawName("20220224_test_walk");
            for (Size i = begin_num; i < end_num; ++i) {
                if (param.active_motor[i]) {
                    param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                }
            }
        }

        //Simulation Points
        for(Size i = begin_num; i < end_num; ++i) {
            if(!param.active_motor[i]) return 0;
        }

        param.step_forward_pos[0] = param.cs.Interpolate(count() / param.s_size);
        param.step_pjs[0] = param.begin_pjs[0] - param.step_forward_pos[0];
        controller()->motorPool().at(0).setTargetPos(param.step_pjs[0]);

        param.step_forward_pos[1] = param.cs1.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[1] = param.begin_pjs[1] + param.step_forward_pos[1];
        controller()->motorPool().at(1).setTargetPos(param.step_pjs[1]);

        param.step_forward_pos[2] = param.cs2.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[2] = param.begin_pjs[2] + param.step_forward_pos[2];
        controller()->motorPool().at(2).setTargetPos(param.step_pjs[2]);

        param.step_forward_pos[3] = param.cs3.Interpolate(count() / param.s_size);
        param.step_pjs[3] = param.begin_pjs[3] - param.step_forward_pos[3];
        controller()->motorPool().at(3).setTargetPos(param.step_pjs[3]);

        param.step_forward_pos[4] = param.cs4.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[4] = param.begin_pjs[4] + param.step_forward_pos[4];
        controller()->motorPool().at(4).setTargetPos(param.step_pjs[4]);

        param.step_forward_pos[5] = param.cs5.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[5] = param.begin_pjs[5] + param.step_forward_pos[5];
        controller()->motorPool().at(5).setTargetPos(param.step_pjs[5]);

        param.step_forward_pos[6] = param.cs6.Interpolate(count() / param.s_size);
        param.step_pjs[6] = param.begin_pjs[6] - param.step_forward_pos[6];
        controller()->motorPool().at(6).setTargetPos(param.step_pjs[6]);

        param.step_forward_pos[7] = param.cs7.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[7] = param.begin_pjs[7] + param.step_forward_pos[7];
        controller()->motorPool().at(7).setTargetPos(param.step_pjs[7]);

        param.step_forward_pos[8] = param.cs8.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[8] = param.begin_pjs[8] + param.step_forward_pos[8];
        controller()->motorPool().at(8).setTargetPos(param.step_pjs[8]);

        param.step_forward_pos[9] = param.cs9.Interpolate(count() / param.s_size);
        param.step_pjs[9] = param.begin_pjs[9] - param.step_forward_pos[9];
        controller()->motorPool().at(9).setTargetPos(param.step_pjs[9]);

        param.step_forward_pos[10] = param.cs10.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[10] = param.begin_pjs[10] + param.step_forward_pos[10];
        controller()->motorPool().at(10).setTargetPos(param.step_pjs[10]);

        param.step_forward_pos[11] = param.cs11.Interpolate(count() / param.s_size) * PI / 180;
        param.step_pjs[11] = param.begin_pjs[11] + param.step_forward_pos[11];
        controller()->motorPool().at(11).setTargetPos(param.step_pjs[11]);

        //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
        return totaltime - count();
    }
    auto MoveSingleLeg::collectNrt()->void {}
    MoveSingleLeg::~MoveSingleLeg() = default;
    MoveSingleLeg::MoveSingleLeg(const std::string &name)
    {
        //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
        //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
        //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
        //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
            "<Command name=\"mvsleg\">"
            "	<GroupParam>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }

    struct MoveRobotParam
    {
        std::vector<bool> active_motor;			//目标电机
        std::vector<double> begin_pjs;			//起始位置
        std::vector<double> step_pjs;			//目标位置

        double begin_pos[3];
        double end_pos[3];
        double mid_pos[3];
        double R = 0.015;

        myGetPosIK myPos;
        int selectIndex[3] = {1,1,2};
        double d1_0, theta2_0, theta3_0;
        double d1, theta2, theta3;

        Size totaltime;
        Size traceOneTime;
        Size traceTwoTime;
        Size traceThreeTime;
    };
    auto MoveRobot::prepareNrt()->void
    {
        MoveRobotParam param;
        param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
        param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
        param.step_pjs.resize(controller()->motorPool().size(), 0.0);

        param.d1_0 = 0.0;
        param.theta2_0 = 0.0;
        param.theta3_0 = 0.0;

        param.d1 = 0.0;
        param.theta2 = 0.0;
        param.theta3 = 0.0;

        param.begin_pos[0] = 441.840698 / 1000;   //x
        param.begin_pos[1] = 0.0;        //y
        param.begin_pos[2] = -445.142639 / 1000;//z

        param.end_pos[0] = param.begin_pos[0];
        param.end_pos[1] = param.begin_pos[1];
        param.end_pos[2] = param.begin_pos[2] - 75.0/1000;

        param.mid_pos[0] = param.begin_pos[0];
        param.mid_pos[1] = param.begin_pos[1] + 2*PI*param.R;
        param.mid_pos[2] = param.begin_pos[2] - 75.0/1000;

        param.traceTwoTime = 10000;     //10s for cycloid;
        //解析指令参数
        for (auto &p : cmdParams())	{
            if (p.first == "all") {
                std::fill(param.active_motor.begin(), param.active_motor.end(), true);
            }
            else if (p.first == "motion_id") {
                param.active_motor.at(int32Param(p.first)) = true;
            }
        }
        this->param() = param;
        std::vector<std::pair<std::string, std::any>> ret_value;
        ret() = ret_value;
    }
    auto MoveRobot::executeRT()->int
    {
        auto &param = std::any_cast<MoveRobotParam&>(this->param());

        Size begin_num = 0;
        Size end_num = 3;
        double next_pos, next_vel, next_acc;
        double r = param.R;
        //第一个周期设置log文件名称，获取当前电机所在位置
        if (count() == 1){
            ecMaster()->logFileRawName("20220224_test02");
            for (Size i = begin_num; i < end_num; ++i) {
                if (param.active_motor[i]) {
                    param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                    param.myPos.fromS1GetMotorAngle(param.begin_pos, param.selectIndex, param.d1_0, param.theta2_0, param.theta3_0);
                }
            }
            moveAbsolute(count(), param.begin_pos[2], param.end_pos[2], 0.000005, 0.0000005, 0.0000005, next_pos, next_vel, next_acc, param.traceOneTime);
            moveAbsolute(count(), param.mid_pos[1], param.end_pos[1], 0.000015, 0.000001, 0.0000005, next_pos, next_vel, next_acc, param.traceThreeTime);
            param.totaltime = param.traceOneTime + param.traceTwoTime + param.traceThreeTime;
            mout() << "traceOneTime: " << param.traceOneTime <<endl;
            mout() << "traceThreeTime: " << param.traceThreeTime <<endl;
            mout() << "totaltime: " << param.totaltime <<endl;
        }

        // Trace1 : Line
        if (count() <= param.traceOneTime)  {
            moveAbsolute(count(), param.begin_pos[2], param.end_pos[2], 0.000005, 0.0000005, 0.0000005, next_pos, next_vel, next_acc, param.traceOneTime);
            double end_point[3] = {param.end_pos[0], param.end_pos[1], next_pos};
            param.myPos.fromS1GetMotorAngle(end_point, param.selectIndex, param.d1, param.theta2, param.theta3);
            for(Size i = begin_num; i < end_num; ++i) {
                if(!param.active_motor[i]) return 0;
            }

            param.step_pjs[0] = param.begin_pjs[0] + 1000 * (param.d1 - param.d1_0);
            controller()->motorPool().at(0).setTargetPos(param.step_pjs[0]);

            param.step_pjs[1] = param.begin_pjs[1] + (param.theta2 - param.theta2_0);
            controller()->motorPool().at(1).setTargetPos(param.step_pjs[1]);

            param.step_pjs[2] = param.begin_pjs[2] + (param.theta3_0 - param.theta3);
            controller()->motorPool().at(2).setTargetPos(param.step_pjs[2]);

//            param.step_pjs[3] = param.begin_pjs[3] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(3).setTargetPos(param.step_pjs[3]);

//            param.step_pjs[4] = param.begin_pjs[4] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(4).setTargetPos(param.step_pjs[4]);

//            param.step_pjs[5] = param.begin_pjs[5] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(5).setTargetPos(param.step_pjs[5]);

//            param.step_pjs[6] = param.begin_pjs[6] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(6).setTargetPos(param.step_pjs[6]);

//            param.step_pjs[7] = param.begin_pjs[7] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(7).setTargetPos(param.step_pjs[7]);

//            param.step_pjs[8] = param.begin_pjs[8] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(8).setTargetPos(param.step_pjs[8]);

//            param.step_pjs[9] = param.begin_pjs[9] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(9).setTargetPos(param.step_pjs[9]);

//            param.step_pjs[10] = param.begin_pjs[10] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(10).setTargetPos(param.step_pjs[10]);

//            param.step_pjs[11] = param.begin_pjs[11] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(11).setTargetPos(param.step_pjs[11]);

            if(count() % 100 == 0){
                mout() << "d1: " << std::setprecision(10) << 1000 * (param.d1 - param.d1_0) <<" "
                          << " theta2: " << std::setprecision(10) << (param.theta2 - param.theta2_0) << " "
                          << " theta3: " << std::setprecision(10) << (param.theta3_0 - param.theta3) << endl;
            }
        }
        // Trace2 : Cycloid
        else if(count() <= param.traceOneTime + param.traceTwoTime){
            Size timeTwo = count() - param.traceOneTime;
            //z = r(1 - cost); y= r(t - sint)); y:0 to 2*pi*r; z: 0 to r to 0;
            double y = r * (2*PI*timeTwo / param.traceTwoTime - sin(2*PI*timeTwo / param.traceTwoTime));
            double z = r * (1 - cos(2*PI*timeTwo / param.traceTwoTime));
            double end_point[3] = {param.end_pos[0], param.end_pos[1] + y, param.end_pos[2] + z};
            if(count() % 100 == 0){
                mout() << "x: " << end_point[0] << " y: " << end_point[1] << " z: " << end_point[2] << std::endl;
            }
            param.myPos.fromS1GetMotorAngle(end_point, param.selectIndex, param.d1, param.theta2, param.theta3);

            for(Size i = begin_num; i < end_num; ++i) {
                if(!param.active_motor[i]) return 0;
            }

            param.step_pjs[0] = param.begin_pjs[0] + 1000 * (param.d1 - param.d1_0);
            controller()->motorPool().at(0).setTargetPos(param.step_pjs[0]);

            param.step_pjs[1] = param.begin_pjs[1] + (param.theta2 - param.theta2_0);
            controller()->motorPool().at(1).setTargetPos(param.step_pjs[1]);

            param.step_pjs[2] = param.begin_pjs[2] + (param.theta3_0 - param.theta3);
            controller()->motorPool().at(2).setTargetPos(param.step_pjs[2]);

//            param.step_pjs[3] = param.begin_pjs[3] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(3).setTargetPos(param.step_pjs[3]);

//            param.step_pjs[4] = param.begin_pjs[4] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(4).setTargetPos(param.step_pjs[4]);

//            param.step_pjs[5] = param.begin_pjs[5] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(5).setTargetPos(param.step_pjs[5]);

//            param.step_pjs[6] = param.begin_pjs[6] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(6).setTargetPos(param.step_pjs[6]);

//            param.step_pjs[7] = param.begin_pjs[7] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(7).setTargetPos(param.step_pjs[7]);

//            param.step_pjs[8] = param.begin_pjs[8] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(8).setTargetPos(param.step_pjs[8]);

//            param.step_pjs[9] = param.begin_pjs[9] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(9).setTargetPos(param.step_pjs[9]);

//            param.step_pjs[10] = param.begin_pjs[10] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(10).setTargetPos(param.step_pjs[10]);

//            param.step_pjs[11] = param.begin_pjs[11] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(11).setTargetPos(param.step_pjs[11]);

//            if(count() % 100 == 0){
//                mout() << "d1: " << std::setprecision(10) << 1000 * (param.d1 - param.d1_0) <<" "
//                          << " theta2: " << std::setprecision(10) << (param.theta2 - param.theta2_0) << " "
//                          << " theta3: " << std::setprecision(10) << (param.theta3_0 - param.theta3) << endl;
//            }
        }

        // Line : backLine
        else{
            moveAbsolute(count() - param.traceOneTime - param.traceTwoTime, 2*PI*0.015, 0, 0.000015, 0.000001, 0.0000005, next_pos, next_vel, next_acc, param.traceThreeTime);
            if(count() % 100 == 0){
                mout() << "x: " << param.end_pos[0] << " y: " << next_pos << " z: " << param.end_pos[2] << std::endl;
            }
            double end_point[3] = {param.end_pos[0], next_pos, param.end_pos[2]};

            param.myPos.fromS1GetMotorAngle(end_point, param.selectIndex, param.d1, param.theta2, param.theta3);
            for(Size i = begin_num; i < end_num; ++i) {
                if(!param.active_motor[i]) return 0;
            }

            param.step_pjs[0] = param.begin_pjs[0] + 1000 * (param.d1 - param.d1_0);
            controller()->motorPool().at(0).setTargetPos(param.step_pjs[0]);

            param.step_pjs[1] = param.begin_pjs[1] + (param.theta2 - param.theta2_0);
            controller()->motorPool().at(1).setTargetPos(param.step_pjs[1]);

            param.step_pjs[2] = param.begin_pjs[2] + (param.theta3_0 - param.theta3);
            controller()->motorPool().at(2).setTargetPos(param.step_pjs[2]);

//            param.step_pjs[3] = param.begin_pjs[3] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(3).setTargetPos(param.step_pjs[3]);

//            param.step_pjs[4] = param.begin_pjs[4] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(4).setTargetPos(param.step_pjs[4]);

//            param.step_pjs[5] = param.begin_pjs[5] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(5).setTargetPos(param.step_pjs[5]);

//            param.step_pjs[6] = param.begin_pjs[6] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(6).setTargetPos(param.step_pjs[6]);

//            param.step_pjs[7] = param.begin_pjs[7] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(7).setTargetPos(param.step_pjs[7]);

//            param.step_pjs[8] = param.begin_pjs[8] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(8).setTargetPos(param.step_pjs[8]);

//            param.step_pjs[9] = param.begin_pjs[9] + 1000 * (param.d1 - param.d1_0);
//            controller()->motorPool().at(9).setTargetPos(param.step_pjs[9]);

//            param.step_pjs[10] = param.begin_pjs[10] + (param.theta2 - param.theta2_0);
//            controller()->motorPool().at(10).setTargetPos(param.step_pjs[10]);

//            param.step_pjs[11] = param.begin_pjs[11] + (param.theta3_0 - param.theta3);
//            controller()->motorPool().at(11).setTargetPos(param.step_pjs[11]);

//            if(count() % 100 == 0){
//                mout() << "d1: " << std::setprecision(10) << 1000 * (param.d1 - param.d1_0) <<" "
//                          << " theta2: " << std::setprecision(10) << (param.theta2 - param.theta2_0) << " "
//                          << " theta3: " << std::setprecision(10) << (param.theta3_0 - param.theta3) << endl;
//            }
        }

        //打印
//        auto &cout = mout();
//        if (count() % 1000 == 0){
//            for (int i = begin_num; i < end_num; i++){
//                cout << std::setprecision(10) << "count:" << count() << "  ";
//                cout << std::setprecision(10) << "targetpos:" << param.step_pjs[i] << "  ";
//                cout << std::setprecision(10) << "actualpos:" << controller()->motorPool()[i].actualPos() << "  ";
//                cout << std::setprecision(10) << "targetVel:" << controller()->motorPool()[i].targetVel() << "  ";
//                cout << std::setprecision(10) << "actualVel:" << controller()->motorPool()[i].actualVel() << "  ";
//                cout << std::setprecision(10) << "actualCur:" << controller()->motorPool()[i].actualCur() << "  ";
//                cout << std::setprecision(10) << "targetToq:" << controller()->motorPool()[i].targetToq() << "  ";
//                cout << std::setprecision(10) << "actualToq:" << controller()->motorPool()[i].actualToq() << "  "<< std::endl;

//            }
//            cout << std::endl;
//        }

        //记录
        auto &lout = ecMaster()->lout();
        for(int i = begin_num; i < end_num; i++){
            lout << i << " "; // "motor: "
            lout << std::setprecision(10) << controller()->motorPool()[i].targetPos()<<"  "; //"targetpos: "
            lout << std::setprecision(10) << controller()->motorPool()[i].actualPos()<<"  "; //"actualPos: "

            lout << std::setprecision(10) << controller()->motorPool()[i].targetVel()<<"  "; //"targetVel: "
            lout << std::setprecision(10) << controller()->motorPool()[i].actualVel()<<"  "; //"actualVel: "

            lout << std::setprecision(10) << controller()->motorPool()[i].targetToq()<<"  "; //"targetToq: "
            lout << std::setprecision(10) << controller()->motorPool()[i].actualToq()<<"  "; //"actualToq: "

            lout << std::setprecision(10) << controller()->motorPool()[i].actualCur()<<"  "; // "actualCur: "
            lout << std::endl;
        }
        lout << std::endl;

        //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
        return param.totaltime - count();
    }
    auto MoveRobot::collectNrt()->void {}
    MoveRobot::~MoveRobot() = default;
    MoveRobot::MoveRobot(const std::string &name)
    {
        //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
        //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
        //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
        //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
            "<Command name=\"mvrobot\">"
            "	<GroupParam>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "			<Param name=\"motion_id\" abbreviation=\"m\" default=\"0\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }


    struct MoveLineParam
    {
        std::vector<bool> active_motor;			//目标电机
        std::vector<double> begin_pjs;			//起始位置
        std::vector<double> step_pjs;			//目标位置

        double init_pos[4][3];      //記錄四條腿末端在程序開始執行時的位置，並在執行結束後進行更新
        double begin_pos[3];        //從init_pos中取出目標腿末端的初始位置
        int legIndex;
        double x, y, z;
        double distance;

        myGetPosIK myPos;
        int selectIndex[3] = {1,1,2};
        double d1_ori, theta2_ori, theta3_ori;
        double d1, theta2, theta3;

        Size totaltime;
    };
    auto MoveLine::prepareNrt()->void
    {
        MoveLineParam param;
        param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
        param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
        param.step_pjs.resize(controller()->motorPool().size(), 0.0);

        param.legIndex = 0;
        param.d1 = 0.0;     param.theta2 = 0.0;     param.theta3 = 0.0;
        param.d1_ori = 0.0; param.theta2_ori = 0.0; param.theta3_ori = 0.0;
        param.x = 0.0;      param.y = 0.0;          param.z = 0.0;

        //解析指令参数
        for (auto &p : cmdParams())	{
            if (p.first == "all") {
                param.legIndex = 12;
                std::fill(param.active_motor.begin(), param.active_motor.end(), true);
            }
            else if (p.first == "leg") {
                if(int32Param(p.first) == 1) {
                    param.legIndex = 0;
                    param.active_motor.at(0) = true; param.active_motor.at(1) = true; param.active_motor.at(2) = true;
                }
                if(int32Param(p.first) == 2) {
                    param.legIndex = 1;
                    param.active_motor.at(3) = true; param.active_motor.at(4) = true; param.active_motor.at(5) = true;
                }
                if(int32Param(p.first) == 3) {
                    param.legIndex = 2;
                    param.active_motor.at(6) = true; param.active_motor.at(7) = true; param.active_motor.at(8) = true;
                }
                if(int32Param(p.first) == 4) {
                    param.legIndex = 3;
                    param.active_motor.at(9) = true; param.active_motor.at(10) = true; param.active_motor.at(11) = true;
                }
            }
            else if (p.first == "x_motion") {
                param.x = doubleParam(p.first) / 1000.0;
            }
            else if (p.first == "y_motion") {
                param.y = doubleParam(p.first) / 1000.0;
            }
            else if (p.first == "z_motion") {
                param.z = doubleParam(p.first) / 1000.0;
            }
        }
        // 從文件中讀取電機初始位置
        ifstream inFile("RobotParam", ios::in);
        if (!inFile.is_open()) {
            mout() << "Can not open the parameter file." << endl;
        }
        mout() << "Start position of four feet:" << endl;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                inFile >> param.init_pos[i][j];
                mout() << param.init_pos[i][j] << " ";
            }
            mout() << endl;
        }
        inFile.close();
        // 若所有腿都運動，以１號腿起始位置作爲所有腿的起始位置
        param.begin_pos[0] = param.init_pos[param.legIndex % 4][0];
        param.begin_pos[1] = param.init_pos[param.legIndex % 4][1];
        param.begin_pos[2] = param.init_pos[param.legIndex % 4][2];
        param.distance = sqrt(pow(param.x, 2) + pow(param.y, 2) + pow(param.z, 2));
        mout() << "distance(mm): " << 1000 * param.distance << endl;
        mout() << "legIndex: " << param.legIndex << endl;
        this->param() = param;
        std::vector<std::pair<std::string, std::any>> ret_value;
        ret() = ret_value;
    }
    auto MoveLine::executeRT()->int
    {
        auto &param = std::any_cast<MoveLineParam&>(this->param());
        // 所有腿都運動
        Size begin_num, end_num;
        if (param.legIndex == 12) {
            begin_num = 0;
            end_num = 12;
        }
        // 單腿運動
        else{
            begin_num = param.legIndex * 3;
            end_num = param.legIndex * 3 + 3;
        }
        double next_pos, next_vel, next_acc;
        //第一个周期设置log文件名称，获取当前电机所在位置
        if (count() == 1){
            ecMaster()->logFileRawName("20220224_test02");
            for (Size i = begin_num; i < end_num; ++i) {
                if (param.active_motor[i]) {
                    param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                    mout() << "begin_pjs" << i << ":" << param.begin_pjs[i] << endl;
                    param.myPos.fromS1GetMotorAngle(param.begin_pos, param.selectIndex, param.d1_ori, param.theta2_ori, param.theta3_ori);
                }
            }
            moveAbsolute(count(), 0, param.distance, 0.00001, 0.000001, 0.000001, next_pos, next_vel, next_acc, param.totaltime);
            mout() << "totaltime(ms): " << param.totaltime << endl;
        }

        moveAbsolute(count(), 0, param.distance, 0.00001, 0.000001, 0.000001, next_pos, next_vel, next_acc, param.totaltime);
        double end_point[3] = {param.begin_pos[0] + next_pos / param.distance * param.x,
                               param.begin_pos[1] + next_pos / param.distance * param.y,
                               param.begin_pos[2] + next_pos / param.distance * param.z};
        param.myPos.fromS1GetMotorAngle(end_point, param.selectIndex, param.d1, param.theta2, param.theta3);
        for(Size i = begin_num; i < end_num; ++i) {
            if(!param.active_motor[i]) return 0;
        }

        for(Size i = begin_num; i < end_num; i += 3) {
            // 主電機
            param.step_pjs[i] = param.begin_pjs[i] + 1000 * (param.d1 - param.d1_ori);
            controller()->motorPool().at(i).setTargetPos(param.step_pjs[i]);
            // 左輔電機
            param.step_pjs[i + 1] = param.begin_pjs[i + 1] + (param.theta2 - param.theta2_ori);
            controller()->motorPool().at(i + 1).setTargetPos(param.step_pjs[i + 1]);
            // 右輔電機
            param.step_pjs[i + 2] = param.begin_pjs[i + 2] + (param.theta3_ori - param.theta3);
            controller()->motorPool().at(i + 2).setTargetPos(param.step_pjs[i + 2]);
        }

        //打印
        if(count() % 1000 == 0){
            mout() << "next_pos(mm): " << std::setprecision(10) << 1000 * next_pos << endl;
            mout() << "end_x:" << std::setprecision(5) << end_point[0] << " "
                   << "end_y:" << std::setprecision(5) << end_point[1] << " "
                   << "end_z:" << std::setprecision(5) << end_point[2] << " " << endl;
        }

        //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
        return param.totaltime - count();
    }
    auto MoveLine::collectNrt()->void {
        auto &param = std::any_cast<MoveLineParam&>(this->param());
        // 更新全局參數
        if (param.legIndex == 12) {
            for (int i = 0; i < 4; i++)     param.init_pos[i][0] += param.x;
            for (int i = 0; i < 4; i++)     param.init_pos[i][1] += param.y;
            for (int i = 0; i < 4; i++)     param.init_pos[i][2] += param.z;
        }
        else {
            param.init_pos[param.legIndex][0] += param.x;
            param.init_pos[param.legIndex][1] += param.y;
            param.init_pos[param.legIndex][2] += param.z;
        }
        ofstream outFile("RobotParam", ios::trunc);
        if(!outFile.is_open()){
            mout() << "Can not open the parameter file." << endl;
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 2; j++) {
                outFile << param.init_pos[i][j] << " ";
            }
            outFile << param.init_pos[i][2] << endl;
        }
        outFile.close();
        mout() << "Finish motion." << endl;
    }
    MoveLine::~MoveLine() = default;
    MoveLine::MoveLine(const std::string &name)
    {
        //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
        //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
        //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
        //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
            "<Command name=\"mvline\">"
            "	<GroupParam>"
            "       <Param name=\"x_motion\" abbreviation=\"x\" default=\"0.0\"/>"
            "       <Param name=\"y_motion\" abbreviation=\"y\" default=\"0.0\"/>"
            "       <Param name=\"z_motion\" abbreviation=\"z\" default=\"0.0\"/>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "           <Param name=\"leg\" abbreviation=\"l\" default=\"1\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }

    struct MovePlanParam
    {
        std::vector<bool> active_motor;			//目标电机
        std::vector<double> begin_pjs;			//起始位置
        std::vector<double> step_pjs;			//目标位置

        static const int data_num = 360;
        CubicSpline cs0;
        CubicSpline cs1;
        CubicSpline cs2;
        CubicSpline cs3;
        CubicSpline cs4;
        CubicSpline cs5;
        CubicSpline cs6;
        CubicSpline cs7;
        CubicSpline cs8;
        CubicSpline cs9;
        CubicSpline cs10;
        CubicSpline cs11;
        double deltaT[data_num];          //每步長運行時間
        double interval_time;
        double init_pos[4][3];      //記錄四條腿末端在程序開始執行時的位置，並在執行結束後進行更新
        double begin_pos[4][3];        //從init_pos中取出目標腿末端的初始位置
        // 四條腿的末端規劃軌跡,將文件中點數*12的數據讀入12*點數的矩陣中
        double legTrace[12][data_num];
        int legIndex;
        // 運動學反解參數
        myGetPosIK myPos[4];
        int selectIndex[3] = {1,1,2};
        double d1_ori[4] = {0.0}, theta2_ori[4] = {0.0}, theta3_ori[4] = {0.0};
        double d1[4] = {0.0}, theta2[4] = {0.0}, theta3[4] = {0.0};
        // 總執行時間
        double totalT;
        Size totaltime;
    };
    auto MovePlan::prepareNrt()->void
    {
        MovePlanParam param;
        param.active_motor.clear();
        param.active_motor.resize(controller()->motorPool().size(), false);
        param.begin_pjs.resize(controller()->motorPool().size(), 0.0);
        param.step_pjs.resize(controller()->motorPool().size(), 0.0);

        // 每一步用時0.5s,可在此處修改
        param.interval_time = 0.5;
        for (int i = 0; i < param.data_num; i++)    param.deltaT[i] = param.interval_time * i;
        param.totaltime = param.interval_time * 1000 * param.data_num;
        param.totalT = static_cast<double>(param.totaltime);

        //解析指令参数
        for (auto &p : cmdParams())	{
            if (p.first == "all") {
                param.legIndex = 12;
                std::fill(param.active_motor.begin(), param.active_motor.end(), true);
            }
            else if (p.first == "leg") {
                if(int32Param(p.first) == 1) {
                    param.legIndex = 0;
                    param.active_motor.at(0) = true; param.active_motor.at(1) = true; param.active_motor.at(2) = true;
                }
                if(int32Param(p.first) == 2) {
                    param.legIndex = 1;
                    param.active_motor.at(3) = true; param.active_motor.at(4) = true; param.active_motor.at(5) = true;
                }
                if(int32Param(p.first) == 3) {
                    param.legIndex = 2;
                    param.active_motor.at(6) = true; param.active_motor.at(7) = true; param.active_motor.at(8) = true;
                }
                if(int32Param(p.first) == 4) {
                    param.legIndex = 3;
                    param.active_motor.at(9) = true; param.active_motor.at(10) = true; param.active_motor.at(11) = true;
                }
            }
        }

        // 從文件中讀取電機初始位置
        ifstream inFile1("RobotParam", ios::in);
        if (!inFile1.is_open()) {
            mout() << "Can not open the parameter file." << endl;
            return;
        }
        mout() << "Start position of four feet:" << endl;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                inFile1 >> param.init_pos[i][j];
                param.begin_pos[i][j] = param.init_pos[i][j];
                mout() << param.init_pos[i][j] << " ";
            }
            mout() << endl;
        }
        inFile1.close();

        // 從文件中讀取足端規劃軌跡
        ifstream inFile2("PlanTrace", ios::in);
        if (!inFile2.is_open()) {
            mout() << "Can not open the trace file." << endl;
            return;
        }
        for(int j = 0; j < 360; j++) {
            for(int i = 0; i < 12; i++) {
                inFile2 >> param.legTrace[i][j];
            }
        }
        inFile2.close();

        this->param() = param;
        std::vector<std::pair<std::string, std::any>> ret_value;
        ret() = ret_value;
    }
    auto MovePlan::executeRT()->int
    {
        auto &param = std::any_cast<MovePlanParam&>(this->param());
        // 所有腿都運動
        Size begin_num, end_num;
        if (param.legIndex == 12) {
            begin_num = 0;
            end_num = 12;
        }
        // 單腿運動
        else{
            begin_num = param.legIndex * 3;
            end_num = param.legIndex * 3 + 3;
        }
        // 第一个周期设置log文件名称，获取当前电机所在位置; 初始化插值函數
        if (count() == 1){
            param.cs0.Initialize(param.deltaT, param.legTrace[0], param.data_num);
            param.cs1.Initialize(param.deltaT, param.legTrace[1], param.data_num);
            param.cs2.Initialize(param.deltaT, param.legTrace[2], param.data_num);
            param.cs3.Initialize(param.deltaT, param.legTrace[3], param.data_num);
            param.cs4.Initialize(param.deltaT, param.legTrace[4], param.data_num);
            param.cs5.Initialize(param.deltaT, param.legTrace[5], param.data_num);
            param.cs6.Initialize(param.deltaT, param.legTrace[6], param.data_num);
            param.cs7.Initialize(param.deltaT, param.legTrace[7], param.data_num);
            param.cs8.Initialize(param.deltaT, param.legTrace[8], param.data_num);
            param.cs9.Initialize(param.deltaT, param.legTrace[9], param.data_num);
            param.cs10.Initialize(param.deltaT, param.legTrace[10], param.data_num);
            param.cs11.Initialize(param.deltaT, param.legTrace[11], param.data_num);
            ecMaster()->logFileRawName("20220224_test02");
            // 初始化電機初始位置［電機坐標系中位置，控制信號用］
            for (Size i = begin_num; i < end_num; ++i) {
                if (param.active_motor[i]) {
                    param.begin_pjs[i] = controller()->motorPool()[i].targetPos();
                    mout() << "begin_pjs" << i << ":" << param.begin_pjs[i] << endl;
                }
            }
            // 初始化電機初始位置［運動學反解坐標系中位置］
            for (int i = 0; i < 4; i++) {
                param.myPos[i].fromS1GetMotorAngle(param.begin_pos[i], param.selectIndex, param.d1_ori[i], param.theta2_ori[i], param.theta3_ori[i]);
            }
        }
        // 把0-1s映射到0-180s, 注意單位爲m
        double time_scale = param.interval_time * param.data_num / param.totalT;    // 當前時間在總時間中的佔比
        double end_point[4][3] = {{param.cs0.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs1.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs2.Interpolate(time_scale * count()) / 1000.0},
                                  {param.cs3.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs4.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs5.Interpolate(time_scale * count()) / 1000.0},
                                  {param.cs6.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs7.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs8.Interpolate(time_scale * count()) / 1000.0},
                                  {param.cs9.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs10.Interpolate(time_scale * count()) / 1000.0,
                                   param.cs11.Interpolate(time_scale * count()) / 1000.0}};
        // 運動學反解
        for (int i = 0; i < 4; i++) {
            param.myPos[i].fromS1GetMotorAngle(end_point[i], param.selectIndex, param.d1[i], param.theta2[i], param.theta3[i]);
        }
        // 電機執行反解結果
        for(Size i = begin_num; i < end_num; ++i) {
            if(!param.active_motor[i]) return 0;
        }
        for(Size i = begin_num; i < end_num; i += 3) {
            // 主電機; i % 3爲腿的序號
            param.step_pjs[i] = param.begin_pjs[i] + 1000 * (param.d1[i % 3] - param.d1_ori[i % 3]);
            controller()->motorPool().at(i).setTargetPos(param.step_pjs[i]);
            // 左輔電機
            param.step_pjs[i + 1] = param.begin_pjs[i + 1] + (param.theta2[i % 3] - param.theta2_ori[i % 3]);
            controller()->motorPool().at(i + 1).setTargetPos(param.step_pjs[i + 1]);
            // 右輔電機
            param.step_pjs[i + 2] = param.begin_pjs[i + 2] + (param.theta3_ori[i % 3] - param.theta3[i % 3]);
            controller()->motorPool().at(i + 2).setTargetPos(param.step_pjs[i + 2]);
        }

        //打印
        if(count() % 5000 == 0){
            mout() << "end_x_leg1:" << std::setprecision(5) << end_point[0][0] << " "
                   << "end_y_leg1:" << std::setprecision(5) << end_point[0][1] << " "
                   << "end_z_leg1:" << std::setprecision(5) << end_point[0][2] << " " << endl;
            mout() << "end_x_leg2:" << std::setprecision(5) << end_point[1][0] << " "
                   << "end_y_leg2:" << std::setprecision(5) << end_point[1][1] << " "
                   << "end_z_leg2:" << std::setprecision(5) << end_point[1][2] << " " << endl;
            mout() << "end_x_leg3:" << std::setprecision(5) << end_point[2][0] << " "
                   << "end_y_leg3:" << std::setprecision(5) << end_point[2][1] << " "
                   << "end_z_leg3:" << std::setprecision(5) << end_point[2][2] << " " << endl;
            mout() << "end_x_leg4:" << std::setprecision(5) << end_point[3][0] << " "
                   << "end_y_leg4:" << std::setprecision(5) << end_point[3][1] << " "
                   << "end_z_leg4:" << std::setprecision(5) << end_point[4][2] << " " << endl;
        }

        //返回0表示正常结束，返回负数表示报错，返回正数表示正在执行
        return param.totaltime - count();
    }
    auto MovePlan::collectNrt()->void {
        auto &param = std::any_cast<MovePlanParam&>(this->param());
        // 更新全局參數
        if (param.legIndex == 12) {
            for (int i = 0; i < 4; i++) {
                param.init_pos[i][0] = param.legTrace[i * 3][param.data_num - 1];
                param.init_pos[i][1] = param.legTrace[i * 3 + 1][param.data_num - 1];
                param.init_pos[i][2] = param.legTrace[i * 3 + 2][param.data_num - 1];
            }
        }
        else {
            param.init_pos[param.legIndex][0] = param.legTrace[param.legIndex * 3][param.data_num - 1];
            param.init_pos[param.legIndex][1] = param.legTrace[param.legIndex * 3 + 1][param.data_num - 1];
            param.init_pos[param.legIndex][2] = param.legTrace[param.legIndex * 3 + 2][param.data_num - 1];
        }
        ofstream outFile("RobotParam", ios::trunc);
        if(!outFile.is_open()){
            mout() << "Can not open the parameter file." << endl;
        }
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 2; j++) {
                outFile << param.init_pos[i][j] << " ";
            }
            outFile << param.init_pos[i][2] << endl;
        }
        outFile.close();
        mout() << "Finish motion." << endl;
    }
    MovePlan::~MovePlan() = default;
    MovePlan::MovePlan(const std::string &name)
    {
        //构造函数参数说明，构造函数通过xml的格式定义本条指令的接口，name表示参数名，default表示输入参数，abbreviation表示参数名的缩写(缩写只能单个字符)
        //1 GroupParam下面的各个节点都是输入参数，如果没有给定会使用默认值
        //2 UniqueParam下面的各个节点互斥，有且只能使用其中的一个
        //3 例如，通过terminal或者socket发送“mvs --pos=0.1”，控制器实际会按照mvs --pos=0.1rad --time=1s --timenum=2 --all执行
        aris::core::fromXmlString(command(),
            "<Command name=\"mvplan\">"
            "	<GroupParam>"
            "		<UniqueParam default=\"all\">"\
            "			<Param name=\"all\" abbreviation=\"a\"/>"\
            "           <Param name=\"leg\" abbreviation=\"l\" default=\"1\"/>"
            "		</UniqueParam>"
            "	</GroupParam>"
            "</Command>");
    }

	ARIS_REGISTRATION
	{
        aris::core::class_<MoveS>("MoveS")
            .inherit<Plan>()
            ;

        aris::core::class_<GetPos>("GetPos")
            .inherit<Plan>()
            ;

        aris::core::class_<FindHome>("FindHome")
            .inherit<Plan>()
            ;

        aris::core::class_<MoveLeg>("MoveLeg")
            .inherit<Plan>()
            ;

        aris::core::class_<MoveSingleLeg>("MoveSingleLeg")
            .inherit<Plan>()
            ;

        aris::core::class_<MoveRobot>("MoveRobot")
            .inherit<Plan>()
            ;

        aris::core::class_<MoveLine>("MoveLine")
            .inherit<Plan>()
            ;

        aris::core::class_<MovePlan>("MovePlan")
            .inherit<Plan>()
            ;
	}

	auto createPlanRoot()->std::unique_ptr<aris::plan::PlanRoot>
	{
		std::unique_ptr<aris::plan::PlanRoot> plan_root(new aris::plan::PlanRoot);
		plan_root->planPool().add<aris::plan::Disable>();
		plan_root->planPool().add<aris::plan::Mode>();
        plan_root->planPool().add<aris::plan::Enable>();
		plan_root->planPool().add<aris::plan::Recover>();
		plan_root->planPool().add<aris::plan::Show>();
		plan_root->planPool().add<aris::plan::Clear>();	

		plan_root->planPool().add<robotLander::MoveS>();
        plan_root->planPool().add<robotLander::GetPos>();
        plan_root->planPool().add<robotLander::FindHome>();
        plan_root->planPool().add<robotLander::MoveLeg>();
        plan_root->planPool().add<robotLander::MoveSingleLeg>();
        plan_root->planPool().add<robotLander::MoveRobot>();
        plan_root->planPool().add<robotLander::MoveLine>();
        plan_root->planPool().add<robotLander::MovePlan>();
		return plan_root;
	}
}
